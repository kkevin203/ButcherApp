@page "/addanimal"
@using Database.Entities;
@using Microsoft.AspNetCore.Components;
@inject AnimalService animalService

@if (FarmerIsConnected)
{
    <h4>Gérer les Animaux</h4>
    <ul>
        @foreach (var animal in animaux)
        {
            <li>
                @animal.Name
                <button class="btn btn-outline-secondary" @onclick="() => UpdateAnimal(animal)">Modifier</button>
                <button class="btn btn-outline-danger" @onclick="() => DeleteAnimal(animal.Id)">Supprimer</button>
            </li>
        }
    </ul>

    <!-- Formulaire pour ajouter/modifier un animal -->
    <h4>@(animalEnEdition.Id == 0 ? "Ajouter un Animal" : "Modifier Animal")</h4>
    <form @onsubmit="ValiderAnimal">
        <div class="form-group">
            <input class="form-control" @bind="animalEnEdition.Name" placeholder="Nom de l'animal" />
            @if (isNameInvalid)
            {
                <div class="text-danger">Le nom de l'animal est requis.</div>
            }
        </div>
        <div class="form-group">
            <input class="form-control" @bind="animalEnEdition.Race" placeholder="Race de l'animal" />
            @if (isRaceInvalid)
            {
                <div class="text-danger">La race de l'animal est requise.</div>
            }
        </div>
        <div class="form-group">
            <input class="form-control" @bind="animalEnEdition.FarmerName" placeholder="Eleveur de l'animal" />
            @if (isProduteurNameInvalid)
            {
                <div class="text-danger">Le nom de l'éleveur est requis.</div>
            }
        </div>
        <div class="form-group">
            <label for="photo">Importer une photo :</label>
            <InputFile id="photo" OnChange="(async e=> await HandleFileChange(e))"></InputFile>
            @if (isPhotoInvalid)
            {
                <div class="text-danger">La photo de l'animal est requise.</div>
            }
        </div>
        <div class="form-group">
            @if (!string.IsNullOrEmpty(animalEnEdition.PhotoPath))
            {
                <img src="uploads/@animalEnEdition.PhotoPath" alt="Animal Image" />
            }
        </div>
        <button type="submit" class="btn btn-primary">@((animalEnEdition.Id == 0 ? "Ajouter" : "Modifier"))</button>
    </form>
}
else
{
    <h4><b>Vous devez vous connecter pour avoir accès à cette page.</b></h4>
}

@code {
    private List<Animal> animaux = new List<Animal>();
    private Animal animalEnEdition = new Animal();
    private bool isNameInvalid = false;
    private bool isRaceInvalid = false;
    private bool isProduteurNameInvalid = false;
    private bool isPhotoInvalid = false;
    private bool FarmerIsConnected = true;


    private async Task SwitchAnimaux()
    {
        try
        {
            animaux = await animalService.GetAnimalsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erreur lors du chargement des animaux : " + ex.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        animalEnEdition = new Animal();
        await SwitchAnimaux();
    }

    private void UpdateAnimal(Animal animal) =>
        animalEnEdition = new Animal
            {
                Id = animal.Id,
                Name = animal.Name,
                Race = animal.Race,
                Categorisation = animal.Categorisation,
                FarmerName = animal.FarmerName,
                PhotoPath = animal.PhotoPath,
                Description = animal.Description,
                Stabu = animal.Stabu
            };

    private async Task ValiderAnimal()
    {
        isNameInvalid = string.IsNullOrWhiteSpace(animalEnEdition.Name);
        isRaceInvalid = string.IsNullOrWhiteSpace(animalEnEdition.Race);
        isProduteurNameInvalid = string.IsNullOrWhiteSpace(animalEnEdition.FarmerName);

        if (isNameInvalid || isRaceInvalid || isProduteurNameInvalid)
        {
            return;
        }

        if (animalEnEdition.Id == 0)
        {
            animalService.AddAnimal(animalEnEdition);
        }
        else
        {
            animalService.UpdateAnimal(animalEnEdition);
        }

        animalEnEdition = new Animal();
        isNameInvalid = false;
        isRaceInvalid = false;
        isProduteurNameInvalid = false;

        await SwitchAnimaux();
    }


    private async Task DeleteAnimal(int animalId)
    {
        animalService.DeleteAnimal(animalId);
        animalEnEdition = new Animal();
        await SwitchAnimaux();
    }

    private List<IBrowserFile> loadedFiles = new();
    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var selectedFile = e.File;

        if (selectedFile != null)
        {
            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(selectedFile.Name)}";
            var filePath = Path.Combine("wwwroot/uploads", fileName);

            try
            {
                using (var fileStream = new FileStream(filePath, FileMode.Create))
                {
                    await selectedFile.OpenReadStream().CopyToAsync(fileStream);
                }
                animalEnEdition.PhotoPath = fileName;
                isPhotoInvalid = string.IsNullOrEmpty(animalEnEdition.PhotoPath);


            }catch {
                isPhotoInvalid = true;
            }
            StateHasChanged();
        }
    }
}
